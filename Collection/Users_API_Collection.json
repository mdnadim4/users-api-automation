{
	"info": {
		"_postman_id": "da1f47fe-b061-44a3-8db7-0d73a29be428",
		"name": "Users API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "2285758"
	},
	"item": [
		{
			"name": "Users Login",
			"item": [
				{
					"name": "Users Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"const token = jsonData.token;\r",
									"\r",
									"pm.collectionVariables.set(\"token\", token);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"\tpm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check if login successfully\", function() {\r",
									"\tpm.expect(jsonData.message).to.eql(\"Login successfully\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"salman@grr.la\",\r\n    \"password\":\"1234\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Users inputs wrong email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"\tpm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"\tpm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Content type is Json\", function() {\r",
									"\tpm.response.to.have.json;\r",
									"})\r",
									"\r",
									"pm.test(\"Verify json response property\", function() {\r",
									"\tpm.expect(jsonData).have.property(\"message\");\r",
									"})\r",
									"\r",
									"pm.test(\"Check if User not found\", function() {\r",
									"\tpm.expect(jsonData.message).to.eql(\"User not found\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"salman@grr.lac\",\r\n    \"password\":\"1234\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Users inputs wrong password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"\tpm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"\tpm.response.to.have.status(\"Unauthorized\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Content type is Json\", function() {\r",
									"\tpm.response.to.have.json;\r",
									"})\r",
									"\r",
									"pm.test(\"Verify json response property\", function() {\r",
									"\tpm.expect(jsonData).have.property(\"message\");\r",
									"})\r",
									"\r",
									"pm.test(\"Check if User not found\", function() {\r",
									"\tpm.expect(jsonData.message).to.eql(\"Password incorrect\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"salman@grr.la\",\r\n    \"password\":\"12345\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users List",
			"item": [
				{
					"name": "Get User List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"\tpm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check if display all user list\", function() {\r",
									"\tpm.expect(jsonData.message).to.eql(\"User list\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the 1st users id\", function() {\r",
									"\tpm.expect(jsonData.users[0].id).to.eql(55);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secret-key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/list",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User List If user input wrong token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 403\", function () {\r",
									"\tpm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Json data is object\", function() {\r",
									"\tpm.expect(jsonData.error).to.be.an(\"object\");\r",
									"})\r",
									"\r",
									"pm.test(\"Verify Json response property\", function() {\r",
									"\tpm.expect(jsonData).have.property(\"error\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Json response value\", function() {\r",
									"\tpm.expect(jsonData.error.message).to.eql(\"Token expired!\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "12345",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secret-key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/list",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User List If user doesn't input token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"\tpm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Json response property\", function() {\r",
									"\tpm.expect(jsonData).have.property(\"error\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Json data is object\", function() {\r",
									"\tpm.expect(jsonData.error).to.be.an(\"object\");\r",
									"})\r",
									"\r",
									"pm.test(\"Verify Json response value\", function() {\r",
									"\tpm.expect(jsonData.error.message).to.eql(\"No Token Found!\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "12345",
								"type": "text",
								"disabled": true
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secret-key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/list",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"list"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User Search",
			"item": [
				{
					"name": "User Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"\tpm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check if user list type array\", function() {\r",
									"\tpm.expect(jsonData.user).to.be.an(\"object\");\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secret-key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/search?email=salman@grr.la",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"search"
							],
							"query": [
								{
									"key": "email",
									"value": "salman@grr.la"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User search If user input wrong phone number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"\tpm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"\tpm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"User should not found\", function() {\r",
									"\tpm.expect(jsonData.message).contains(\"User not found\");\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secret-key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/search?phone_number=0168660690",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"search"
							],
							"query": [
								{
									"key": "phone_number",
									"value": "0168660690"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create User",
			"item": [
				{
					"name": "Create New User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"\tpm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"\tpm.expect(pm.response.status).to.include(\"Created\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"\tpm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body response is JSON Object\", function() {\r",
									"\tpm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify JSON response properties\", function() {\r",
									"\tpm.expect(jsonData).have.property(\"message\");\r",
									"\tpm.expect(jsonData).have.property(\"user\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response should not be error\", function() {\r",
									"\tpm.response.to.not.be.error;\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var nid = _.random(1000000000,9999999999);\r",
									"\r",
									"const reqObject = {\r",
									"\turl: \"https://randomuser.me/api\",\r",
									"\tmethod: \"GET\",\r",
									"\theader: \"Content-Type:application/json\"\r",
									"};\r",
									"\r",
									"pm.sendRequest(reqObject, (err, res) => {\r",
									"\tlet { results } = res.json();\r",
									"\tlet name = `${results[0].name.first} ${results[0].name.last}`;\r",
									"\tlet email = results[0].email;\r",
									"\tlet phone_number = results[0].phone;\r",
									"\tlet password = pm.variables.replaceIn(\"{{$randomPassword}}\");\r",
									"\tlet role = \"Customer\";\r",
									"\r",
									"\tpm.collectionVariables.set(\"name\", name);\r",
									"\tpm.collectionVariables.set(\"email\", email);\r",
									"\tpm.collectionVariables.set(\"password\", password);\r",
									"\tpm.collectionVariables.set(\"phone_number\", phone_number);\r",
									"\tpm.collectionVariables.set(\"nid\", nid);\r",
									"\tpm.collectionVariables.set(\"role\", role);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secret-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"{{name}}\",\r\n    \"email\":\"{{email}}\",\r\n    \"password\":\"{{password}}\",\r\n    \"phone_number\":\"{{phone_number}}\",\r\n    \"nid\":\"{{nid}}\",\r\n    \"role\":\"{{role}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Random User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var randomDigits = _.random(1000000, 9999999);\r",
									"var code = \"0150\";\r",
									"var nid_code = \"123\";\r",
									"var phoneNumber = code + randomDigits;\r",
									"var nid = nid_code + randomDigits;\r",
									"\r",
									"pm.collectionVariables.set(\"phoneNumber\", phoneNumber);\r",
									"pm.collectionVariables.set(\"nid\", nid);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"\tpm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"\tpm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"\tpm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body response is JSON Object\", function() {\r",
									"\tpm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify JSON response properties\", function() {\r",
									"\tpm.expect(jsonData).have.property(\"message\");\r",
									"\tpm.expect(jsonData).have.property(\"user\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check if user already exists\", function() {\r",
									"\tpm.expect(jsonData.message).contains(\"User created successfully\");\r",
									"})\r",
									"\r",
									"pm.test(\"Response should not be error\", function() {\r",
									"\tpm.response.to.not.be.error;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secret-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"{{$randomFullName}}\",\r\n    \"email\":\"{{$randomEmail}}\",\r\n    \"password\":\"{{$randomPassword}}\",\r\n    \"phone_number\":\"{{phoneNumber}}\",\r\n    \"nid\":\"{{nid}}\",\r\n    \"role\":\"Customer\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Existing User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 208\", function () {\r",
									"\tpm.response.to.have.status(208);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"\tpm.response.to.have.status(\"Already Reported\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify JSON response properties\", function() {\r",
									"\tpm.expect(jsonData).have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Json response value\", function() {\r",
									"\tpm.expect(jsonData.message).contains(\"User already exists\");\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secret-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"Caleb Fadel\",\r\n    \"email\":\"Kayli_Mann@yahoo.com\",\r\n    \"password\":\"XNxsTVVtTlvGQVn\",\r\n    \"phone_number\":\"01505573415\",\r\n    \"nid\":\"5573538\",\r\n    \"role\":\"Customer\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var user = jsonData.users[jsonData.users.length - 1];\r",
									"// var user = jsonData.users[jsonData.count - 1];\r",
									"// var user  = jsonData.users[_.random(1, jsonData.users.length)];\r",
									"var id = user.id;\r",
									"// console.log(id);\r",
									"\r",
									"pm.collectionVariables.set(\"id\", id);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"\tpm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check if display all user list\", function() {\r",
									"\tpm.expect(jsonData.message).contains(\"User list\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secret-key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/list",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"list"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update User",
			"item": [
				{
					"name": "Update User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"\tpm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify json response with input data\", function() {\r",
									"\t\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secret-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Nadim Mahmud\",\r\n\t\"email\": \"userb33448@testing.com\",\r\n\t\"password\": \"12345678\",\r\n\t\"phone_number\": \"774-724-8642\",\r\n\t\"nid\": \"71275406\",\r\n\t\"role\": \"Customer\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/update/{{id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"update",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user specific value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check if user is updated\", function () {\r",
									"    pm.expect(jsonData.message).contains(\"User updated successfully\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check if updated email with input data\", function () {\r",
									"    pm.expect(jsonData.user.email).to.eql(pm.collectionVariables.get(\"updated_email\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var updated_email = pm.variables.replaceIn(\"{{$randomEmail}}\");\r",
									"\r",
									"pm.collectionVariables.set(\"updated_email\", updated_email);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secret-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"{{updated_email}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/update/{{id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"update",
								"{{id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete User",
			"item": [
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"\tpm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify JSON data properties\", function() {\r",
									"\tpm.expect(jsonData).have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check if User deleted successfully\", function() {\r",
									"\tpm.expect(jsonData.message).contains(\"User deleted successfully\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify data type of response\", function() {\r",
									"\tpm.response.to.have.jsonBody;\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"\tpm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secret-key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/delete/{{id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"delete",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Already for deleted user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"\tpm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify JSON data properties\", function() {\r",
									"\tpm.expect(jsonData).have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check if User deleted successfully\", function() {\r",
									"\tpm.expect(jsonData.message).contains(\"User not found\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secret-key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/delete/{{id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"delete",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search the deleted user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"\tpm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify JSON data properties\", function() {\r",
									"\tpm.expect(jsonData).have.property(\"user\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check if User not found\", function() {\r",
									"\tpm.expect(jsonData.user).to.eql(null);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secret-key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/search?id={{id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"search"
							],
							"query": [
								{
									"key": "id",
									"value": "{{id}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "secret-key",
			"value": "ROADTOSDET",
			"type": "string"
		},
		{
			"key": "token",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InNhbG1hbkBncnIubGEiLCJwYXNzd29yZCI6IjEyMzQiLCJpYXQiOjE2NjUwODg0NDMsImV4cCI6MTY2NTA5MDI0M30.tfUzXubIqZ0O47v04XfY7wZQ6noZ-_NDv9LDEpxgIWk"
		},
		{
			"key": "email",
			"value": "rosie.craig@example.com"
		},
		{
			"key": "nid",
			"value": "1235815487"
		},
		{
			"key": "role",
			"value": "Customer"
		},
		{
			"key": "id",
			"value": 10436
		},
		{
			"key": "name",
			"value": "Rosie Craig"
		},
		{
			"key": "password",
			"value": "k7GG6Syb8qUe7tC"
		},
		{
			"key": "phone_number",
			"value": "019467 89149"
		},
		{
			"key": "updated_email",
			"value": "Nathanial.Connelly@yahoo.com"
		},
		{
			"key": "phoneNumber",
			"value": "01505815487"
		}
	]
}